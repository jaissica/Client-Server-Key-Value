Assignment overview:

The objective of this Project is to create a server program that works as a key-value store, providing operations like “PUT”, “GET” and “DELETE” to its clients. This server implementation supports two communication protocols - UDP (connectionless) and TCP (connection oriented). 
The project states that the Client should be able to communicate with the server using either UDP or TCP. Another objective of the assignment is that the code should be equipped to handle server failures. I have used timeout mechanism to handle server failures. Additionally, both the client and server are designed to handle malformed packets to ensure robustness of the program. To establish a connection with the server, command line arguments specifying the server's hostname or IP address and port number are utilized by the client. The client is also equipped with a timeout mechanism to manage server failures effectively. Also, the code is also able to handle incorrectly formatted inputs or situations by raising Exceptions and thus are handled in way to maintain system stability. To enhance usability, client’s actions with a timestamp are used to create a clear track of interactions between the client and server.
To demonstrate the utilization of both protocols (TCP and UDP), two instances of the client and two instances of the Server program are created. The emphasis in this assignment is on error handling, the ability to handle malformed packets and respond to server failures robustly thus having effective communication between Client and Server.


Technical impression:

This project gave me an opportunity to have a hands-on experience into the practical aspects of constructing a server-client system. The primary task was to implement a key-value store that allowed clients to interact with the server through operations like “PUT”, “GET” & “DELETE”. Firstly, to work on this project I needed a strong understanding of UDP & TCP communication protocols, including their functionality, how they are different in their working & how each of them perform communication between Client and Server. Secondly, to store the key-value pairs, I used a “keyValues.properties" file. This file helped me to keep a log of the operations and easy addition, retrieval and deletion based on keys.  Additionally, in the code part I created 4 java files, ClientTCP & ServerTCP for communication between Client and Server using TCP Protocol and ClientUDP & ServerUDP for communication between Client and Server using UDP communication Protocol. Each of these classes had main function which would take command line arguments like ip Address & port number. The classes also included helper methods which helped in checking validity of operations provided, and logging request, responses and errors between Client and server.
As I am working on a project like for the first time so throughout the implementation of this Project, I faced various challenges related to error handling, packet formatting and timing. Ensuring that both the server and client could adeptly manage malformed packets & respond appropriately was most crucial aspect of this project and I was able to handle this efficient timeout mechanism and error handling to avoid unhandled errors thus enabling client to recover smoothly from unwanted scenarios. This project proved to be an invaluable learning experience for me, enabling me to deepen my understanding of network programming principles. I gained practical insights into socket communication, server responsiveness, and the effective handling of diverse request types. In summary, this assignment's concepts and skills can be directly applied to building a distributed collaborative document editing platform, ensuring reliable communication, robust error handling, and efficient data management. It serves as a practical example of how the principles learned can be put into use to create real-world applications that require distributed data management and client-server interactions.

 

